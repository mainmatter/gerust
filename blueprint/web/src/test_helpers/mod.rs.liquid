use axum::{
    body::{Body, Bytes},
    http::{Method, Request},
    response::Response,
    Router,
};
use hyper::header::{HeaderMap, HeaderName};
{%- if template_type != "minimal" -%}
use {{crate_name}}_config::{load_config, Config, Environment};
use {{crate_name}}_db::{
    test_helpers::{setup_db, teardown_db},
    DbPool,
};
use crate::routes::init_routes;
use crate::state::AppState;
use std::cell::OnceCell;
{%- else -%}
use {{crate_name}}_config::{load_config, Config, Environment};
use crate::routes::init_routes;
use crate::state::AppState;
use std::cell::OnceCell;
{%- endif -%}
use tower::ServiceExt;

pub struct TestRequest {
    router: Router,
    uri: String,
    method: Method,
    headers: HeaderMap,
    body: Body,
}

impl TestRequest {
    fn new(router: Router, uri: &str) -> Self {
        Self {
            router,
            uri: String::from(uri),
            headers: HeaderMap::new(),
            body: Body::empty(),
            method: Method::GET,
        }
    }

    #[allow(unused)]
    pub fn method(mut self, method: Method) -> Self {
        self.method = method;
        self
    }

    #[allow(unused)]
    pub fn header(mut self, name: HeaderName, value: &str) -> Self {
        self.headers.insert(name, value.parse().unwrap());
        self
    }

    #[allow(unused)]
    pub fn body(mut self, body: Body) -> Self {
        self.body = body;
        self
    }

    #[allow(unused)]
    pub async fn send(self) -> Response {
        let mut request_builder = Request::builder().uri(&self.uri);

        for (key, value) in &self.headers {
            request_builder = request_builder.header(key, value);
        }

        request_builder = request_builder.method(&self.method);

        let request = request_builder.body(self.body);

        self.router.oneshot(request.unwrap()).await.unwrap()
    }
}

pub trait RouterExt {
    #[allow(unused)]
    fn request(&self, uri: &str) -> TestRequest;
}

impl RouterExt for Router {
    #[allow(unused)]
    fn request(&self, uri: &str) -> TestRequest {
        TestRequest::new(self.clone(), uri)
    }
}

pub trait BodyExt {
    #[allow(unused, async_fn_in_trait)]
    async fn into_bytes(self) -> Bytes;

    #[allow(unused, async_fn_in_trait)]
    async fn into_json<T>(self) -> T
    where
        T: serde::de::DeserializeOwned;
}

impl BodyExt for Body {
    #[allow(unused)]
    async fn into_bytes(self) -> Bytes {
        // We don't care about the size limit in tests.
        axum::body::to_bytes(self, usize::MAX)
            .await
            .expect("Failed to read response body")
    }

    #[allow(unused)]
    async fn into_json<T>(self) -> T
    where
        T: serde::de::DeserializeOwned,
    {
        let body = self.into_bytes().await;
        serde_json::from_slice::<T>(&body).expect("Failed to deserialize JSON body")
    }
}

{%- if template_type != "minimal" -%}
pub struct DbTestContext {
    /// The application that is being tested.
    pub app: Router,
    /// A connection pool connected to the same database that the application that is being tested uses as well.
    pub db_pool: DbPool,
}

#[allow(unused)]
pub async fn setup_with_db() -> DbTestContext {
    let init_config: OnceCell<Config> = OnceCell::new();
    let config = init_config.get_or_init(|| load_config(&Environment::Test).unwrap());

    let test_db_pool = setup_db(&config.database).await;

    let app = init_routes(AppState {
        db_pool: test_db_pool.clone(),
    });

    DbTestContext {
        app,
        db_pool: test_db_pool,
    }
}

#[allow(unused)]
pub async fn teardown_with_db(context: DbTestContext) {
    drop(context.app);

    teardown_db(context.db_pool);
}
{% else %}
/// Provides context for application tests.
///
/// A `TestContext` is passed as an argument to tests marked with the [`{{crate_name}}_macros::test`] attribute macro. It is used to access the application under test.
///
/// Example:
/// ```
/// #[test]
/// async fn test_hello(context: &TestContext) {
///     let response = context.app.request("/greet").send().await;
/// 
///     let greeting: Greeting = response.into_body().into_json().await;
///     assert_that!(greeting.hello, eq(String::from("world")));
/// }
/// ```
pub struct TestContext {
    /// The application that is being tested.
    pub app: Router,
}

pub async fn setup() -> TestContext {
    let init_config: OnceCell<Config> = OnceCell::new();
    let _config = init_config.get_or_init(|| load_config(&Environment::Test).unwrap());

    let app = init_routes(AppState {});

    TestContext { app }
}
{%- endif %}
